//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""CustomizeApartment"",
            ""id"": ""3faf46ae-187f-456a-9d39-9944729f2354"",
            ""actions"": [
                {
                    ""name"": ""CamRotationDir"",
                    ""type"": ""Value"",
                    ""id"": ""79b3da5a-bf9b-44e3-a5ba-85f037abd2a2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7c76bd48-2dba-458d-9744-b4d61faf1f80"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotationDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5b332e01-68a7-45ae-b3c8-75f0e4467651"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotationDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9f9c0f54-89aa-4955-9408-618eb04330eb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotationDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ab3c8a5e-9eba-4993-8eaa-562c05f5cca2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotationDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""200ff806-33cf-4588-a962-4637a131a809"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotationDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cab8c7a0-aaa1-4a2c-8502-58cef87647e2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotationDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""None"",
            ""id"": ""f8b7983d-db8a-4fff-b8cb-a14c31f5d259"",
            ""actions"": [
                {
                    ""name"": ""NullAction"",
                    ""type"": ""Button"",
                    ""id"": ""62c599b8-df42-4a88-80d7-9766517cbab4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // CustomizeApartment
        m_CustomizeApartment = asset.FindActionMap("CustomizeApartment", throwIfNotFound: true);
        m_CustomizeApartment_CamRotationDir = m_CustomizeApartment.FindAction("CamRotationDir", throwIfNotFound: true);
        // None
        m_None = asset.FindActionMap("None", throwIfNotFound: true);
        m_None_NullAction = m_None.FindAction("NullAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CustomizeApartment
    private readonly InputActionMap m_CustomizeApartment;
    private List<ICustomizeApartmentActions> m_CustomizeApartmentActionsCallbackInterfaces = new List<ICustomizeApartmentActions>();
    private readonly InputAction m_CustomizeApartment_CamRotationDir;
    public struct CustomizeApartmentActions
    {
        private @Controls m_Wrapper;
        public CustomizeApartmentActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CamRotationDir => m_Wrapper.m_CustomizeApartment_CamRotationDir;
        public InputActionMap Get() { return m_Wrapper.m_CustomizeApartment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CustomizeApartmentActions set) { return set.Get(); }
        public void AddCallbacks(ICustomizeApartmentActions instance)
        {
            if (instance == null || m_Wrapper.m_CustomizeApartmentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CustomizeApartmentActionsCallbackInterfaces.Add(instance);
            @CamRotationDir.started += instance.OnCamRotationDir;
            @CamRotationDir.performed += instance.OnCamRotationDir;
            @CamRotationDir.canceled += instance.OnCamRotationDir;
        }

        private void UnregisterCallbacks(ICustomizeApartmentActions instance)
        {
            @CamRotationDir.started -= instance.OnCamRotationDir;
            @CamRotationDir.performed -= instance.OnCamRotationDir;
            @CamRotationDir.canceled -= instance.OnCamRotationDir;
        }

        public void RemoveCallbacks(ICustomizeApartmentActions instance)
        {
            if (m_Wrapper.m_CustomizeApartmentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICustomizeApartmentActions instance)
        {
            foreach (var item in m_Wrapper.m_CustomizeApartmentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CustomizeApartmentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CustomizeApartmentActions @CustomizeApartment => new CustomizeApartmentActions(this);

    // None
    private readonly InputActionMap m_None;
    private List<INoneActions> m_NoneActionsCallbackInterfaces = new List<INoneActions>();
    private readonly InputAction m_None_NullAction;
    public struct NoneActions
    {
        private @Controls m_Wrapper;
        public NoneActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NullAction => m_Wrapper.m_None_NullAction;
        public InputActionMap Get() { return m_Wrapper.m_None; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NoneActions set) { return set.Get(); }
        public void AddCallbacks(INoneActions instance)
        {
            if (instance == null || m_Wrapper.m_NoneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NoneActionsCallbackInterfaces.Add(instance);
            @NullAction.started += instance.OnNullAction;
            @NullAction.performed += instance.OnNullAction;
            @NullAction.canceled += instance.OnNullAction;
        }

        private void UnregisterCallbacks(INoneActions instance)
        {
            @NullAction.started -= instance.OnNullAction;
            @NullAction.performed -= instance.OnNullAction;
            @NullAction.canceled -= instance.OnNullAction;
        }

        public void RemoveCallbacks(INoneActions instance)
        {
            if (m_Wrapper.m_NoneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INoneActions instance)
        {
            foreach (var item in m_Wrapper.m_NoneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NoneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NoneActions @None => new NoneActions(this);
    public interface ICustomizeApartmentActions
    {
        void OnCamRotationDir(InputAction.CallbackContext context);
    }
    public interface INoneActions
    {
        void OnNullAction(InputAction.CallbackContext context);
    }
}
